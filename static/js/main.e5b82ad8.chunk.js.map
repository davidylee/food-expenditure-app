{"version":3,"sources":["components/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","Form","inline","FormControl","type","placeholder","Button","variant","foodexpenditureItems","date","name","price","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderItems","state","itemList","map","item","key","navbar","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e5b82ad8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Navbar,\n  Nav,\n  NavItem,\n  NavDropdown,\n  MenuItem,\n  Form,\n  FormControl,\n  Button\n} from \"react-bootstrap\";\n\n// Stateless Functional Component\n\nconst NavBar = () => {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">Food Expense Tracker v1.0</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#link\">Help</Nav.Link>\n          <NavDropdown title=\"Menu\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.2\">\n              Another action\n            </NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item href=\"#action/3.4\">\n              Separated link\n            </NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n        <Form inline>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Enter Food Item...\"\n            className=\"mr-sm-2\"\n          />\n          <Button variant=\"outline-success\">Search</Button>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default NavBar;\n","/*\nimport React, { Component } from \"react\";\n\nconst foodexpenditureItems = [\n  {\n    id: 1,\n    date: \"2019-03-13\",\n    name: \"Test Item 1\",\n    price: 10\n  },\n  {\n    id: 2,\n    date: \"2019-03-15\",\n    name: \"Test Item 2\",\n    price: 12.0\n  }\n];\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemList: foodexpenditureItems\n    };\n  }\n  renderItems = () => {\n    const newItems = this.state.itemList;\n    return newItems.map(item => (\n      <li\n        key={item.id}\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\n      >\n        <span className={`foodexpenditure-title mr-2`} title={item.}>\n          {item.name}\n        </span>\n        <span>\n          <button className=\"btn btn-secondary mr-2\"> Edit </button>\n          <button className=\"btn btn-danger\">Delete </button>\n        </span>\n      </li>\n    ));\n  };\n  render() {\n    return (\n      <main className=\"content\">\n        <h1 className=\"text-white text-uppercase text-center my-4\">\n          Food Expenditure Tracking app\n        </h1>\n        <div className=\"row \">\n          <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n            <div className=\"card p-3\">\n              <div className=\"\">\n                <button className=\"btn btn-primary\">Add Item</button>\n              </div>\n              <ul className=\"list-group list-group-flush\">\n                {this.renderItems()}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n*/\n\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\n\nconst foodexpenditureItems = [\n  {\n    id: 1,\n    date: \"2019-03-13\",\n    name: \"Panera Small Coffee\",\n    price: 2.39\n  },\n  {\n    id: 2,\n    date: \"2019-03-15\",\n    name: \"Test Item 2\",\n    price: 12.01\n  }\n];\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemList: foodexpenditureItems\n    };\n  }\n  renderItems = () => {\n    const newItems = this.state.itemList;\n    return newItems.map(item => (\n      <li\n        key={item.id}\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\n      >\n        <span className={\"col-sm\"}>{item.date}</span>\n        <span className={\"col-sm\"}>{item.name}</span>\n        <span className={\"col-sm\"}>{item.price}</span>\n        <span>\n          <button className=\"btn btn-secondary mr-2\"> Edit </button>\n          <button className=\"btn btn-danger\">Delete </button>\n        </span>\n      </li>\n    ));\n  };\n  render() {\n    return (\n      <main className=\"content\">\n        <NavBar />\n        <div className=\"row\">\n          <div className=\"col-md-10 col-sm-10 mx-auto p-0\">\n            <div className=\"card p-3\">\n              <div className=\"add-item-button\">\n                <button className=\"btn btn-primary\">Add Item</button>\n              </div>\n              <ul className=\"list-group list-group-flush\">\n                {this.renderItems()}\n              </ul>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}